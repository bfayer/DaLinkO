using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace DaLinkO
{
    public partial class CodeGenerator : Form
    {
        private Broadcast broadcast;

        public CodeGenerator(Broadcast b)
        {
            InitializeComponent();

            broadcast = b;

            cbDeviceType.Items.Add("Arduino Uno R3");
            cbDeviceType.SelectedIndex = 0;

            cbProgramType.Items.Add("Recieve data");
            cbProgramType.SelectedIndex = 0;


                         updateCode();

        }

        private void updateCode()
        {
            if (broadcast.transmission.TElementList[0].elementValueAsText == "#")//checks to see that there is a transmission byte, is this necessary? should probably just do it when launching the form
            {    

                if (cbDeviceType.SelectedIndex == 0) //if it's an arduino then....
                {
                    if (cbProgramType.SelectedIndex == 0)  //choose which program to generate..
                    {
                        try { codeArduinoRead(); } //try to generate the code
                        catch (Exception e)
                        {
                            rtbCode.Clear();
                            rtbCode.Text = e.ToString(); //print errors in the main box if it's bugged out

                        }
                    }
                }
            }
            else
            {
                rtbCode.Text = "transmission is not compatible without the default # sign initiator";
            }

        }

        /// <summary>
        /// Generates universal code header
        /// </summary>
        /// <param name="device"></param>
        /// <param name="program"></param>
        /// <returns></returns>
        private string codeHeader(string device, string program)
        {
            string headerText = String.Format(@"/*
Dalinko autogenerated code for brodacast: {0}
Intended device: {1}
Base program: {2}
Created: {3}
*/", broadcast.name, device, program, DateTime.Now.ToLongDateString());

            return headerText;
        }

        //Arduino Uno code generation specifics

        /// <summary>
        /// initializes the generation of code and prints it in the text box
        /// needs to be overhauled
        /// </summary>
        private void codeArduinoRead()
        {
            string header = codeHeader("Arduino UNO", "Read"); //header tag
            string variables = codeVariables_ArduinoUno(); //sets up the variable types and names ie:  int hp;
            string int32Union = int32unions_ArduinoUno(); //creates int32 unions if there are ints32's
            string setup = codeSetup_ArduinoUno(); // setup code for serial port
            string byteBuf = byteBuffer_ArduinoUno(); //standard byte buffer stuff (measures broadcast length and sizes accordingly.)
            string unionLoopCallouts = mainLoopUnions_ArduinoUno(); //calls union names in loop
            string varPopulation = varPopulator_ArduinoUno(); //populates all of the variables with the new data from the buffer
            rtbCode.Text = String.Format(@"{0}

//read buffer stuff
{1}

//Variables
{2}

{3}

{4}
void loop()
{{
{5}
  if (Serial.available() >0) {{
    inByte = Serial.read();
    delay(10);
    
    if (inByte == '#') // An incoming ""#"" sign byte triggers the program to start reading sequencial bytes into the buffer
        {{
            while (pointer < {6}) 
            {{
                buffer[pointer] = Serial.read(); 
                pointer++;
            }}
{7}
        //your code here
        //example: Serial.println(one of your varialbles);

        }}   
      
 
      pointer=0;  //resets the pointer for the serial reader

      Serial.flush();
    }} 
}}", header, byteBuf, variables,int32Union, setup, unionLoopCallouts, Convert.ToString(broadcast.transmission.GetByteCount()-1),varPopulation);
        }


        private string byteBuffer_ArduinoUno()
        {
            string byteBuffer = @"byte buffer[" + broadcast.transmission.GetByteCount().ToString() + @"];
int pointer = 0; 
byte inByte = 0;";
            return byteBuffer;

        }
        /// <summary>
        /// generates a list of undefined variables for arduino sketches
        /// </summary>
        /// <returns></returns>
        private string codeVariables_ArduinoUno()
        {

            string variableText = "";

            //there may be a bug in this loop, i had a note saying there was but i can't get it to break now.
            foreach (TElement t in broadcast.transmission.TElementList)
            {
                if (t.type != "byte")// || t.elementName == "trigger") //don't really want to use trigger in case someone uses that name in their code but you can't change anything to be type byte[]
                {
                    //variableText = String.Concat(variableText, CVRT.getDataTypeForArduinoUno(t) + " " + t.elementName + "=" + t.elementValueAsText + ";" + Environment.NewLine);


                    variableText = String.Concat(variableText, CVRT.getDataTypeForArduinoUno(t) + " " + t.elementName + ";" + Environment.NewLine);
                }
            }
            

            return variableText;
        }
        /// <summary>
        /// returns the code for an int32 union if there is an integer in the broadcast
        /// </summary>
        /// <returns></returns>
        private string int32unions_ArduinoUno()
        {
            string unionCode="";

            foreach (TElement t in broadcast.transmission.TElementList)
            {
                if (t.type == "System.Int32")// this does not concat because you only need 1 arraytoint32 union for all of them, they are declared individually in the main loop
                {
                    unionCode = @"
union ArrayToInt32 {
  int32_t integer;
  byte array[4];
};" + Environment.NewLine;
                }
            }

            return unionCode;
        }
        /// <summary>
        /// The setup block for arduino uno sketches
        /// </summary>
        /// <returns></returns>
        private string codeSetup_ArduinoUno()
        {
            string setupText = String.Format(@"void setup()
{{

  Serial.begin({0});
  Serial.println(""Connected"");

  //include your setup code here

}}", broadcast.connection.baud.ToString());


            return setupText;
        }
        private string mainLoopUnions_ArduinoUno()
        {
            string unionLoops = "";
            foreach (TElement t in broadcast.transmission.TElementList)
            {
                if (t.type == "System.Int32")
                {
                    unionLoops = string.Concat(unionLoops, "    ArrayToInt32 " +t.elementName+ "U;" + Environment.NewLine);
                }
            }

            return unionLoops;
        }
        private string varPopulator_ArduinoUno()
        {
            string populatedInts ="";
            int bufferCount = 0;
            
            foreach (TElement t in broadcast.transmission.TElementList)
            {
                
                if (t.type == "System.Int32")
                {
                    int x = 0;
                    while (x < 4) //this sends the 4 bytes that make up the integer into the union array for each specific type.
                    {
                    populatedInts = String.Concat(populatedInts, "            "+ t.elementName + "U.array[" + Convert.ToString(x) + "] = buffer[" + Convert.ToString(bufferCount) +"];"  + Environment.NewLine);
                    x++;
                    bufferCount++;

                    }
                    populatedInts = String.Concat(populatedInts, "            "+ t.elementName + "=" + t.elementName + "U.integer;" + Environment.NewLine);   // creates lines like hp = hpU.integer;
                }
                else if (t.type == "System.Boolean")
                {
                    populatedInts = String.Concat(populatedInts, "            " + t.elementName + " = buffer[" + Convert.ToString(bufferCount) + "];" + Environment.NewLine);
                    bufferCount++;
                }
                
            }


            return populatedInts;
        }

    }
}



////the health level at any point in time
//int hp; 
//int preHP; //was used when trying to figure out if there was a change in hp since last transmition 

////stuff used for input from pc
//byte buffer[8] ;
//int pointer = 0; 
//byte inByte = 0;  
//int healthFraction=0;

//// Set up outputs, and start at assumed 100% hp

//// union for converting byte array to int32, 4 bytes in
//union ArrayToInt32 {
//  int32_t integer;
//  byte array[4];
//};




//void setup()
//{

//  Serial.begin(115200);
//  Serial.println("Connected");
//  //hp = 100;

//  Serial.flush();// Give reader a chance to see the output.
//}


//void loop()
//{
//  ArrayToInt32 hp;
//  ArrayToInt32 hpMax;
//  // check serial port for input from pc
//  if (Serial.available() >0) {
//    // read the incoming byte:
//    inByte = Serial.read();
//    delay(10);
//    // The "#" sign incoming starts filling the serial read buffer array, otherwise nothing happens
//    if (inByte == '#') {
//      while (pointer < 8) { // accumulate chars in the buffer
//        buffer[pointer] = Serial.read(); 
//        pointer++;
//      }
//      hp.array[0]=buffer[0];
//      hp.array[1]=buffer[1];
//      hp.array[2]=buffer[2];
//      hp.array[3]=buffer[3];
//      hpMax.array[0]=buffer[4];
//      hpMax.array[1]=buffer[5];
//      hpMax.array[2]=buffer[6];
//      hpMax.array[3]=buffer[7];
      
//      healthFraction = 1000*hp.integer/hpMax.integer;
//      //need to change this to output something like
//      //int1=xxx
//      //int2=xxx
//      //bool3=xxx
      
//        Serial.println(healthFraction);
//      }   
      
 
//      pointer=0;  //resets the pointer for the serial reader

//      Serial.flush();
//    } 
//}








using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace DaLinkO
{
    public partial class CodeGenerator : Form
    {
        private Broadcast broadcast;

        public CodeGenerator(Broadcast b)
        {
            InitializeComponent();

            broadcast = b;

            cbDeviceType.Items.Add("Arduino Uno R3");
            cbDeviceType.SelectedIndex = 0;

            cbProgramType.Items.Add("Recieve data");
            cbProgramType.SelectedIndex = 0;

            updateCode();
        }

        private void updateCode()
        {
            if (cbDeviceType.SelectedIndex == 0)
            {
                if (cbProgramType.SelectedIndex == 0)
                {
                    try { codeArduinoRead(); }
                    catch (Exception e)
                    {
                        rtbCode.Clear();
                        rtbCode.Text = e.ToString();

                    }
                }
            }
        }

        private void codeArduinoRead()
        {
            string header = codeHeader("Arduino UNO", "Read"); 
            string variables = codeVariables();
            string setup = codeSetup();
            string Main = @"main";

            rtbCode.Text = String.Format(@"{0}

{1}

{2}

{3}
", header, variables, setup, Main);
        }

        private string codeHeader(string device, string program)
        {
            string headerText = String.Format(@"/*
Dalinko autogenerated code for brodacast: {0}
Intended device: {1}
Base program: {2}
Created: {3}
*/", broadcast.name, device, program, DateTime.Now.ToLongDateString());

            return headerText;
        }
        private string codeSetup()
        {
            string setupText = String.Format(@"void setup()
{{

  Serial.begin({0});
  Serial.println(""Connected"");

}}", broadcast.connection.baud.ToString());
            

            return setupText;
        }
        private string codeVariables()
        {

            string variableText = "";

            //the below loop isn't functional yet 
            foreach (TElement t in broadcast.transmission.TElementList)
            {
                String.Concat(variableText, CVRT.getDataTypeForArduino(t) + " " + t.elementName + " = " + t.elementValueAsText + ";" + Environment.NewLine);
            }

            return variableText;
        }


    }
}
